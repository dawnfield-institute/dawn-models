# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is possible to generate automatically using the import statements in the files.
#  For this reason, PyCharm specific gitignore entries are generated on-demand rather than being
#  pre-written. See the examples below for more information:
#  https://intellij-support.jetbrains.com/hc/en-us/articles/206544839

# IDE-specific files
.idea/
.vscode/
*.swp
*.swo

# macOS
.DS_Store
.AppleDouble
.LSOverride

# Windows
Thumbs.db
Thumbs.db:encryptable
ehthumbs.db
ehthumbs_vista.db
*.tmp
*.temp
Desktop.ini
$RECYCLE.BIN/
*.cab
*.msi
*.msix
*.msm
*.msp
*.lnk

# Linux
*~

# Model files and large data
*.pkl
*.pickle
*.model
*.weights
*.h5
*.pb
*.onnx
*.pt
*.pth

# Logs and temporary files
*.log
*.out
*.err
logs/
temp/
tmp/

# Data directories
data/
datasets/
raw_data/
processed_data/

# Experiment outputs
results/
outputs/
checkpoints/
experiments/
runs/

# GAIA-specific ignores
research/GAIA/src/__pycache__/
research/GAIA/src/core/__pycache__/
research/GAIA/.pytest_cache/
research/GAIA/tests/__pycache__/
research/GAIA/tests/.pytest_cache/

# SCBF experiment outputs
research/scbf/scbf_experiments/*/
research/scbf/logs/
research/scbf/metrics/__pycache__/
research/scbf/loggers/__pycache__/
research/scbf/utils/__pycache__/
research/scbf/visualization/__pycache__/

# TinyCIMM outputs
research/tinycimm/TinyCIMM-*/outputs/
research/tinycimm/TinyCIMM-*/logs/
research/tinycimm/TinyCIMM-*/temp/

# Stable model artifacts
stable/cimm-legacy/results/
stable/cimm-legacy/data/processed/
stable/cimm-legacy/models/trained/

# Documentation builds
docs/build/
docs/_build/
docs/site/

# Package management
requirements-dev.txt
pip-wheel-metadata/

# Backup files
*.bak
*.backup
*~
*.orig

# Configuration files with sensitive data
config.json
settings.json
secrets.json
.env.local
.env.development
.env.test
.env.production

# Research artifacts
*.pdf
*.png
*.jpg
*.jpeg
*.gif
*.svg
plots/
figures/
visualizations/

# Jupyter notebook outputs
*-checkpoint.ipynb

# Profiling data
*.prof
profile_*.txt

# Core dumps
core.*

# Virtual environments (additional patterns)
.conda/
conda-meta/
.python-version

# CIP metadata cache
.cip/cache/
.cip/temp/

# Dawn Field Institute specific
*.dfi
*.dawn
.dawn/